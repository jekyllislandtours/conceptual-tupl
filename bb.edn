{:tasks
 {:requires ([clojure.edn :as edn]
             [clojure.string :as str])

  :init
  (do
    (defn cli-args-map
      []
      (->> *command-line-args*
           (map (comp edn/read-string str/trim))
           (apply hash-map))))
  clean
  {:doc "Cleans up any build artifacts"
   :task (shell "clojure -T:build clean")}

  compile:java
  {:doc "Compiles the java files"
   :task (shell "clojure -T:build compile-java")}

  compile:clj
  {:doc "Compiles the Clojure files"
   :task (shell "clojure -T:build compile-clj")}

  build:jar
  {:doc "Builds a jar file"
   :task (shell "clojure -T:build jar")}

  install
  {:doc "Install into local Maven repo cache"
   :task (shell "clojure -T:build install")}


  test
  {:doc "Runs clojure tests"
   :depends [compile:java]
   :task (shell "clojure -M:dev:test default")}

  deploy
  {:doc "Deploy to clojars."
   :depends [clean compile:java test build:jar]
   :task (shell "clojure -T:build deploy")}




  test:ff
  {:doc "Runs clojure tests stopping on first failure."
   :task (shell "clojure -M:dev:test default --fail-fast")}

  test:focus
  {:doc "Runs a specific clojure tests referenced by namespace or fully qualified var."
   :task (let [named-test (first *command-line-args*)]
           (when-not named-test
             (lib/sys-exit 1 "no namespace or fully qualified var specified"))
           (shell (str "clojure -M:dev:test --focus " named-test)))}


  dev:cider
  {:doc "Starts dev repl"
   :task (shell "clojure -M:dev:test:cider")}

  outdated
  {:doc "Show outdated dependencies. Specify :upgrade true to upgrade"
   :task (let [{:keys [upgrade] :as args} (cli-args-map)
               upgrade-flag (if upgrade "--upgrade --force --download" "")
               cmd (format "clojure -M:outdated --skip=pom %s" upgrade-flag)]
           ;; continue true required because outdated exits with 1 when there are
           ;; deps that can be upgraded
           (shell {:continue true} cmd))}}}
